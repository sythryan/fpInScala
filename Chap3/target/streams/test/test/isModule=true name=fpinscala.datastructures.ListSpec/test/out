[0m[[0minfo[0m] [0mListSpec[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37msum should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m sum a list of Int[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37mproduct should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m multiply a list of Double[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37mtail should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m return all but the head of a list[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37msetHead should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m relplace the head of a list[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37mdrop should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m drop n amount of elements[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37mdropWhile should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m drop elements while they pass f[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37minit should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m return a list with all but the last element[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37msum2 should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m return the sum of a list[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37mproduct2 should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m return the produt of elements in a list[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37mlength should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m return the length of a list[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37msumLeft should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m return the sum of a list[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37mproductLeft should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m return the produt of elements in a list[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37mlengthLeft should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m return the length of a list[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37mreverse should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m return a reverse list[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37mappend should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m return a list append to another list[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37mconcatenate should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m join a list of lists into one list[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37maddOneToAll should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m add one to each element of a list of Int[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37mdoubleToString should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m return a list of strings of the previous doubles[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37mmap should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m add one to every elem in the List[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37mfilter should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m only return odd numbers[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37mflatMap should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m return a list flattened for some function[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37mfilterWithFlatMap should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m do the same thing as the previous filter[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37mmergeAdd should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m merge two Int lists together by adding corresponding elements[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37mmerge should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m merge any two lists together with some function f[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37mhasSubsequence should[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[32m+[0m return a boolean if a list contains the subsequence[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0m[37m[0m[0m
[0m[[0minfo[0m] [0m[37m[0mTotal for specification ListSpec[0m
[0m[[0minfo[0m] [0m[34mFinished in 18 ms[0m[0m
[0m[[0minfo[0m] [0m[34m[0m[34m25 examples, 0 failure, 0 error[0m[0m
